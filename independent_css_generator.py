#!/usr/bin/env python3
"""
Independent CSS generator for emotional-decoration.
No external dependencies - completely self-contained.
"""

import json
from pathlib import Path
from typing import Dict, Any


class IndependentCSSGenerator:
    """Self-contained CSS generator without any external dependencies."""
    
    def __init__(self):
        self.theme_config = self._create_learning_focused_theme()
        
    def _create_learning_focused_theme(self) -> Dict[str, Any]:
        """Create learning focused theme configuration."""
        return {
            "name": "Learning Focused",
            "description": "Blue-green gradient theme optimized for educational content",
            "colors": {
                "primary_start": "#4A90E2",
                "primary_end": "#7ED321", 
                "background_start": "#000428",
                "background_end": "#004e92",
                "accent_color": "#50E3C2",
                "glow_color": "#4A90E2"
            },
            "effects": {
                "glow_intensity": 0.3,
                "animation_speed": 0.8,
                "pulse_enabled": False,
                "gradient_angle": 45,
                "blur_radius": 2.0,
                "shadow_intensity": 0.4
            },
            "typography": {
                "font_weight": "500",
                "letter_spacing": "0.01em",
                "line_height": "1.6"
            },
            "compatibility": ["typewriter", "railway", "scroll"]
        }
    
    def generate_css_content(self) -> str:
        """Generate complete CSS content."""
        theme = self.theme_config
        colors = theme["colors"]
        effects = theme["effects"]
        typography = theme["typography"]
        
        # Calculate derived values
        glow_radius = effects["glow_intensity"] * 8
        animation_duration = 1 / effects["animation_speed"]
        container_padding = max(10, effects["glow_intensity"] * 20)
        border_radius = effects["blur_radius"] * 2
        sentence_margin = effects["glow_intensity"] * 5
        bg_angle = effects["gradient_angle"] + 45
        
        css_content = f'''/*
 * Emotional Decoration Theme: {theme["name"]}
 * Description: {theme["description"]}
 * Compatible with: {", ".join(theme["compatibility"])}
 * 
 * This CSS enhances scroll-cast animations without breaking core functionality.
 * Generated by emotional-decoration system.
 */

:root {{
    /* Color Variables */
    --decoration-primary-start: {colors["primary_start"]};
    --decoration-primary-end: {colors["primary_end"]};
    --decoration-bg-start: {colors["background_start"]};
    --decoration-bg-end: {colors["background_end"]};
    --decoration-accent-color: {colors["accent_color"]};
    --decoration-glow-color: {colors["glow_color"]};
    
    /* Effect Variables */
    --decoration-glow-intensity: {effects["glow_intensity"]};
    --decoration-glow-radius: {glow_radius}px;
    --decoration-animation-duration: {animation_duration}s;
    --decoration-blur-radius: {effects["blur_radius"]}px;
    --decoration-gradient-angle: {effects["gradient_angle"]}deg;
    --decoration-bg-angle: {bg_angle}deg;
    --decoration-shadow-intensity: {effects["shadow_intensity"]};
    
    /* Layout Variables */
    --decoration-container-padding: {container_padding}px;
    --decoration-border-radius: {border_radius}px;
    --decoration-sentence-margin: {sentence_margin}px 0;
    
    /* Typography Variables */
    --decoration-font-weight: {typography["font_weight"]};
    --decoration-letter-spacing: {typography["letter_spacing"]};
    --decoration-line-height: {typography["line_height"]};
    --decoration-text-transform: none;
}}

/* Base Decoration Styles */
.decoration-enhanced {{
    /* Common decoration enhancements */
    font-weight: var(--decoration-font-weight);
    letter-spacing: var(--decoration-letter-spacing);
    line-height: var(--decoration-line-height);
    text-transform: var(--decoration-text-transform);
    
    /* Smooth transitions */
    transition: all 0.3s ease-in-out;
    
    /* Hardware acceleration */
    transform: translateZ(0);
    will-change: transform, opacity, filter;
}}

.decoration-enhanced:hover {{
    /* Hover effects */
    filter: brightness(1.1) contrast(1.05);
    transform: translateZ(0) scale(1.02);
}}

/* Reduced motion support */
@media (prefers-reduced-motion: reduce) {{
    .decoration-enhanced {{
        animation: none !important;
        transition: none !important;
    }}
    
    .decoration-enhanced:hover {{
        transform: none !important;
    }}
}}

/* Typewriter Template Decoration */
.typewriter-char {{
    /* Core functionality preserved from scroll-cast */
    /* opacity, transition, display are controlled by scroll-cast */
    
    /* Decoration enhancements */
    background: linear-gradient(var(--decoration-gradient-angle), var(--decoration-primary-start), var(--decoration-primary-end));
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
    
    /* Glow effect */
    filter: drop-shadow(0 0 var(--decoration-glow-radius) var(--decoration-glow-color));
    
    /* Animation enhancement */
    animation: decorationEnhance var(--decoration-animation-duration) ease-in-out;
}}

.typewriter-char.decoration-enhanced {{
    /* Additional styling when decoration is active */
    position: relative;
    z-index: 1;
}}

.typewriter-char.decoration-enhanced::before {{
    content: '';
    position: absolute;
    top: -2px;
    left: -2px;
    right: -2px;
    bottom: -2px;
    background: var(--decoration-accent-color);
    opacity: var(--decoration-glow-intensity);
    border-radius: 2px;
    z-index: -1;
    filter: blur(var(--decoration-blur-radius));
}}

.typewriter-container {{
    /* Container decoration */
    background: linear-gradient(var(--decoration-bg-angle), var(--decoration-bg-start), var(--decoration-bg-end));
    padding: var(--decoration-container-padding);
    border-radius: var(--decoration-border-radius);
}}

.typewriter-sentence {{
    /* Sentence-level decoration */
    position: relative;
    margin: var(--decoration-sentence-margin);
}}

@keyframes decorationEnhance {{
    0% {{
        filter: drop-shadow(0 0 0 transparent);
        transform: scale(1);
    }}
    50% {{
        filter: drop-shadow(0 0 var(--decoration-glow-radius) var(--decoration-glow-color));
        transform: scale(1.01);
    }}
    100% {{
        filter: drop-shadow(0 0 var(--decoration-glow-radius) var(--decoration-glow-color));
        transform: scale(1);
    }}
}}

/* Responsive Styles */
@media (max-width: 768px) {{
    :root {{
        --decoration-glow-radius: calc(var(--decoration-glow-radius) * 0.8);
        --decoration-container-padding: calc(var(--decoration-container-padding) * 0.8);
    }}
    
    .decoration-enhanced {{
        /* Reduced effects on mobile */
        filter: none !important;
        transform: none !important;
    }}
}}

@media (max-width: 480px) {{
    :root {{
        --decoration-glow-radius: calc(var(--decoration-glow-radius) * 0.6);
        --decoration-container-padding: calc(var(--decoration-container-padding) * 0.6);
    }}
}}

@media (min-width: 1200px) {{
    :root {{
        --decoration-glow-radius: calc(var(--decoration-glow-radius) * 1.2);
        --decoration-container-padding: calc(var(--decoration-container-padding) * 1.2);
    }}
}}

/* Accessibility Styles */
@media (prefers-contrast: high) {{
    :root {{
        --decoration-glow-intensity: 0.8;
        --decoration-shadow-intensity: 0.9;
    }}
    
    .decoration-enhanced {{
        /* Higher contrast for accessibility */
        text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.8);
    }}
}}

@media (prefers-contrast: low) {{
    :root {{
        --decoration-glow-intensity: 0.3;
        --decoration-shadow-intensity: 0.3;
    }}
}}

/* Focus styles for keyboard navigation */
.decoration-enhanced:focus {{
    outline: 2px solid var(--decoration-accent-color);
    outline-offset: 2px;
    border-radius: var(--decoration-border-radius);
}}

/* High contrast mode support */
@media (prefers-color-scheme: dark) {{
    :root {{
        --decoration-bg-start: #1a1a1a;
        --decoration-bg-end: #2d2d2d;
    }}
}}'''
        
        return css_content
    
    def minify_css(self, css: str) -> str:
        """Minify CSS by removing unnecessary whitespace and comments."""
        import re
        
        # Remove comments
        css = re.sub(r'/\*.*?\*/', '', css, flags=re.DOTALL)
        
        # Remove extra whitespace
        css = re.sub(r'\s+', ' ', css)
        
        # Remove whitespace around specific characters
        css = re.sub(r'\s*([{{}}:;,])\s*', r'\1', css)
        
        # Remove trailing semicolons before closing braces
        css = re.sub(r';\s*}}', '}}', css)
        
        return css.strip()
    
    def generate_integration_manifest(self) -> Dict[str, Any]:
        """Generate integration manifest for scroll-cast."""
        theme = self.theme_config
        return {
            "name": theme["name"],
            "description": theme["description"],
            "version": "1.0.0",
            "compatibility": {
                "scroll_cast_templates": theme["compatibility"],
                "css_override_architecture": True,
                "non_interference_design": True
            },
            "css_variables": [
                "--decoration-primary-start",
                "--decoration-primary-end", 
                "--decoration-bg-start",
                "--decoration-bg-end",
                "--decoration-accent-color",
                "--decoration-glow-color",
                "--decoration-glow-intensity",
                "--decoration-glow-radius",
                "--decoration-animation-duration"
            ],
            "css_selectors": [
                ".typewriter-char",
                ".typewriter-container",
                ".typewriter-sentence",
                ".decoration-enhanced"
            ],
            "integration_points": {
                "css_import": "Add CSS link after scroll-cast styles",
                "class_enhancement": "Add .decoration-enhanced to elements",
                "no_html_modification": "Works with existing HTML structure"
            },
            "scroll_cast_integration": {
                "preserved_classes": [
                    ".typewriter-char (opacity, transition, display)",
                    ".typewriter-container (position, transform)",
                    ".typewriter-sentence (display, active states)"
                ],
                "enhanced_properties": [
                    "background (gradient text)",
                    "filter (glow effects)",
                    "animation (decoration enhancements)"
                ],
                "css_override_safe": True
            }
        }
    
    def generate_integration_guide(self) -> str:
        """Generate integration guide markdown."""
        return '''# Emotional Decoration Integration Guide

## Overview
This guide demonstrates how to integrate emotional-decoration CSS with scroll-cast HTML without modifying the core scroll-cast system.

## Integration Steps

### 1. Add CSS Import (AFTER scroll-cast styles)

```html
<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ScrollCast - TypeWriter Effect (Plugin)</title>
    
    <!-- ScrollCast Shared Styles (FIRST) -->
    <link rel="stylesheet" href="shared/scrollcast-styles.css">
    
    <!-- Emotional Decoration Enhancement (AFTER) -->
    <link rel="stylesheet" href="shared/emotional-decoration.css">
    
    <!-- ... rest of head ... -->
</head>
```

### 2. Optional: Add Enhancement Classes

For maximum effect, add `.decoration-enhanced` class to individual characters:

```html
<span class="typewriter-char decoration-enhanced" data-char-index="0" id="char-0">H</span>
```

### 3. CSS Override Architecture

The emotional-decoration CSS uses **CSS Override Architecture**:

- ✅ **Preserves** scroll-cast functionality (opacity, transition, display)
- ✅ **Enhances** visual appearance (background, filter, animation)  
- ✅ **No conflicts** with existing CSS selectors
- ✅ **Uses CSS custom properties** for easy customization

## Customization

Override CSS variables to customize the decoration:

```css
:root {
    --decoration-primary-start: #your-color;
    --decoration-primary-end: #your-color;
    --decoration-glow-intensity: 0.5;
    /* ... more variables ... */
}
```

## Architecture Benefits

1. **Non-interference**: Both systems work independently
2. **Backwards compatible**: Works with all existing scroll-cast HTML
3. **Optional**: Can be enabled/disabled without code changes
4. **Performance**: No impact on scroll-cast core functionality
5. **Maintainable**: Separate concerns and lifecycle

## Verification

To verify the integration works:

1. Scroll-cast animations function normally
2. Text gradients and glow effects are visible
3. No console errors or CSS conflicts
4. Responsive design works on mobile
5. Accessibility features remain intact

This integration demonstrates the "pre-agreed CSS/JS" approach where both systems prepare compatible files independently.
'''


def main():
    """Generate CSS files for scroll-cast integration."""
    print("🎨 INDEPENDENT CSS GENERATOR FOR EMOTIONAL-DECORATION")
    print("=" * 55)
    
    # Create generator
    generator = IndependentCSSGenerator()
    
    # Generate CSS content
    css_content = generator.generate_css_content()
    minified_css = generator.minify_css(css_content)
    
    # Create output directory
    output_dir = Path("css_output")
    output_dir.mkdir(exist_ok=True)
    
    # Save CSS files
    css_file = output_dir / "emotional-decoration.css"
    min_file = output_dir / "emotional-decoration.min.css"
    manifest_file = output_dir / "integration-manifest.json"
    guide_file = output_dir / "integration-guide.md"
    
    css_file.write_text(css_content, encoding='utf-8')
    min_file.write_text(minified_css, encoding='utf-8')
    
    # Generate and save manifest
    manifest = generator.generate_integration_manifest()
    manifest_file.write_text(json.dumps(manifest, indent=2), encoding='utf-8')
    
    # Generate integration guide
    guide_content = generator.generate_integration_guide()
    guide_file.write_text(guide_content, encoding='utf-8')
    
    # Stats
    css_size = len(css_content)
    min_size = len(minified_css)
    css_rules = css_content.count('{')
    css_vars = css_content.count('--decoration-')
    
    print(f"✅ Generated files:")
    print(f"   📄 {css_file.name} - {css_size:,} bytes")
    print(f"   📄 {min_file.name} - {min_size:,} bytes (minified)")
    print(f"   📄 {manifest_file.name} - Integration manifest") 
    print(f"   📄 {guide_file.name} - Integration guide")
    print(f"   📁 Output directory: {output_dir}")
    print(f"")
    print(f"📊 CSS Statistics:")
    print(f"   🎯 CSS Rules: {css_rules}")
    print(f"   🎨 CSS Variables: {css_vars}")
    print(f"   📉 Compression: {((css_size - min_size) / css_size * 100):.1f}%")
    
    return output_dir, [css_file, min_file, manifest_file, guide_file]


if __name__ == "__main__":
    try:
        output_dir, files = main()
        print(f"\n🎉 Success! Files ready for scroll-cast integration.")
        print(f"   ➡️  Next: Copy CSS to contents/html/shared/ and add import to HTML")
    except Exception as e:
        print(f"❌ Generation failed: {e}")
        import traceback
        traceback.print_exc()
        exit(1)